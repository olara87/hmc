"""
Django settings for hmc project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path


BASE_DIR = Path(__file__).resolve().parent.parent
# Env.read_env(os.path.join(BASE_DIR, 'hmc/.env')) #Taken out due to not being in django-environ quick start

# Build paths inside the project like this: BASE_DIR / 'subdir'.


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str(os.environ.get("DEBUG")) == "1"
LOCAL_IP = os.environ.get("LOCAL_IP")
LOCAL_HOST = os.environ.get("LOCAL_HOST")
ENV_ALLOWED_HOST = os.environ.get("ENV_ALLOWED_HOST")
ALLOWED_IP = os.environ.get("ALLOWED_IP")
ALLOWED_HOSTS = []
if ENV_ALLOWED_HOST and not DEBUG:
    ALLOWED_HOSTS = [ ENV_ALLOWED_HOST, LOCAL_IP, LOCAL_HOST, ALLOWED_IP ]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Apps
    "core",
    # "products",
    # "orders",
    # "invoice", #removed
    # AWS
    "storages",
    # installed libraries
    # "django_browser_reload", #removed
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # installed libraries
    # installed libraries end
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hmc.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hmc.wsgi.application"


# Database

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Postgres database

DB_ENGINE = os.environ.get("DB_ENGINE")
DB_USERNAME = os.environ.get("DB_USERNAME")
DB_PASSWORD = os.environ.get("DB_PASSWORD")
DB_DATABASE = os.environ.get("DB_DATABASE")
DB_HOST = os.environ.get("DB_HOST")
DB_PORT = os.environ.get("DB_PORT")

DB_IS_AVAIL = all([DB_USERNAME, DB_PASSWORD, DB_DATABASE, DB_HOST, DB_PORT])
# DB_READY = str(os.environ.get("DB_READY")) == "1"
# if DB_IS_AVAIL and DB_READY:

DB_IGNORE_SSL = os.environ.get("DB_IGNORE_SSL") == "true"

if DB_IS_AVAIL and not DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": DB_ENGINE,
            "NAME": DB_DATABASE,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASSWORD,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        }
    }

    if not DB_IGNORE_SSL:
        DATABASES["default"]["OPTIONS"] = { # type: ignore
            "sslmode": "require"
        }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STATIC_ROOT = BASE_DIR / "staticfiles-cdn"

STATICFILES_DIRS = [
    BASE_DIR / "static",  # os.path.join(BASE_DIR, 'static')
]

if DEBUG:
    from .cdn.conf import * # noqa

# from .cdn.conf import (
#         AWS_ACCESS_KEY_ID,
#         AWS_SECRET_ACCESS_KEY,
#         AWS_STORAGE_BUCKET_NAME,
#         AWS_S3_ENDPOINT_URL,
#         AWS_S3_OBJECT_PARAMETERS,
#         AWS_LOCATION,
#         DEFAULT_FILE_STORAGE,
#         STATICFILES_STORAGE,
#     )

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field



# ===================================================================
# This is to send emails from django project
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_COMPANY = os.environ.get("EMAIL_HOST_COMPANY")
COMPANY_WEBSITE = os.environ.get("COMPANY_WEBSITE")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
# ===================================================================
